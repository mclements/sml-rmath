(* This Source Code Form is subject to the terms of the Mozilla Public *)
(* License, v. 2.0.  If a copy of the MPL was not distributed with this *)
(* file, You can obtain one at http://mozilla.org/MPL/2.0/. *)

(* Copyright 2018 Mark Clements *)

divert(`-1')
define(`CONSTANT',`val $2 = $3')
define(`FUNCTION0',`val $2 = _import "$2": () -> real;')
define(`FUNCTION1',`val $2 = _import "$2": TYPE($3) -> real;')
define(`FUNCTION2',`val $2 = _import "$2": (TYPE($3), TYPE($5)) -> real;')
define(`FUNCTION3',`val $2 = _import "$2": (TYPE($3), TYPE($5), TYPE($7)) -> real;')
define(`FUNCTION4',`val $2 = _import "$2": (TYPE($3), TYPE($5), TYPE($7), TYPE($9)) -> real;')
define(`FUNCTION5',`val $2 = _import "$2": (TYPE($3), TYPE($5), TYPE($7), TYPE($9), TYPE($11)) -> real;')
define(`FUNCTION6',`val $2 = _import "$2": (TYPE($3), TYPE($5), TYPE($7), TYPE($9), TYPE($11), TYPE($13)) -> real;')
divert(`1')dnl
structure Rmath =
struct
datatype test_alternative = TwoSided | Less | Greater
include(`rmath-template.m4')dnl
val imax2 = _import "imax2": (int, int) -> int;
val imin2 = _import "imin2": (int, int) -> int;
val set_seed = _import "set_seed": (int, int) -> ();
local
    val get_seed_call = _import "get_seed": (int ref, int ref) -> ();
    val rmultinom_call = _import "rmultinom" : (int, real Array.array, int, int Array.array) -> ();
    val lgammafn_sign_call = _import "lgammafn_sign": (real, int ref) -> real;
in
fun get_seed() =
    let
	val seed1 = ref 1
	and seed2 = ref 1
	val _ = get_seed_call(seed1, seed2)
    in
	(!seed1, !seed2)
    end
fun rmultinom(n : int, prob : real Array.array) =
    let
	val k = Array.length prob
	val rN = Array.array(k, 0)
	val _ = rmultinom_call(n, prob, k, rN)
    in
	rN
    end
fun lgammafn_sign(x) =
    let
	val sign = ref 0
	val y = lgammafn_sign_call(x, sign)
    in
	(y, !sign)
    end
end
EXTRAFUNS(Real.posInf)
