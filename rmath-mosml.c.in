#include <mlvalues.h>		/* For Val_unit, Long_val, String_val, ... */
#include <alloc.h>		/* For copy_string, alloc_string, ...      */
#include <memory.h>		/* For Modify, Push_roots, Pop_roots       */
#include <str.h>		/* For string_length                       */
#include <interp.h>	/* For callback                            */

#include <major_gc.h>
#include <mlvalues.h>
#include <stacks.h>
#include <stdio.h>

#define Setup_for_gc
#define Restore_after_gc


#define MATHLIB_STANDALONE
#include <Rmath.h>

#ifdef WIN32
#define EXTERNML __declspec(dllexport)
#else
#define EXTERNML
#endif
#define Rf_log1pexp log1pexp
divert(`-1')dnl

define(`MosRead',`ifelse($1,double,Double_val,$1,int,Long_val,UNKNOWN)')

define(`MosWrite',`ifelse($1,double,copy_double,$1,int,Val_long,UNKNOWN)')

define(`CONSTANT',`// constant $2 defined in SML code')

define(`FUNCTION0',`// $1
EXTERNML value r_$2() {
  return copy_double($2($4));
}')

define(`FUNCTION1',`// $1
EXTERNML value r_$2(value v) {
  $3 $4 = MosRead($3)(v);
  return copy_double($2($4));
}')

define(`FUNCTION2',`// $1
EXTERNML value r_$2(value v) {
  $3 $4 = MosRead($3)(Field(v, 0));
  $5 $6 = MosRead($5)(Field(v, 1));
  return copy_double($2($4,$6));
}')

define(`FUNCTION3',`// $1
EXTERNML value r_$2(value v) {
  $3 $4 = MosRead($3)(Field(v, 0));
  $5 $6 = MosRead($5)(Field(v, 1));  
  $7 $8 = MosRead($7)(Field(v, 2));
  return copy_double($2($4,$6,$8));
}')

define(`FUNCTION4',`// $1
EXTERNML value r_$2(value v) {
  $3 $4 = MosRead($3)(Field(v, 0));
  $5 $6 = MosRead($5)(Field(v, 1));  
  $7 $8 = MosRead($7)(Field(v, 2));
  $9 $10 = MosRead($9)(Field(v, 3));
  return copy_double($2($4,$6,$8,$10));
}')

define(`FUNCTION5',`// $1
EXTERNML value r_$2(value v) {
  $3 $4 = MosRead($3)(Field(v, 0));
  $5 $6 = MosRead($5)(Field(v, 1));  
  $7 $8 = MosRead($7)(Field(v, 2));
  $9 $10 = MosRead($9)(Field(v, 3));
  $11 $12 = MosRead($11)(Field(v, 4));
  return copy_double($2($4,$6,$8,$10,$12));
}')

define(`FUNCTION6',`// $1
EXTERNML value r_$2(value v) {
  $3 $4 = MosRead($3)(Field(v, 0));
  $5 $6 = MosRead($5)(Field(v, 1));  
  $7 $8 = MosRead($7)(Field(v, 2));
  $9 $10 = MosRead($9)(Field(v, 3));
  $11 $12 = MosRead($11)(Field(v, 4));
  $13 $14 = MosRead($13)(Field(v, 5));
  return copy_double($2($4,$6,$8,$10,$12,$14));
}')

divert(`1')dnl
include(`rmath-template.m4')dnl

// imax2(x,y)
EXTERNML value r_imax2(value v) {
  int x = MosRead(int)(Field(v, 0));
  int y = MosRead(int)(Field(v, 1));
  return MosWrite(int)(imax2(x,y));
}
// imin2(x,y)
EXTERNML value r_imin2(value v) {
  int x = MosRead(int)(Field(v, 0));
  int y = MosRead(int)(Field(v, 1));
  return MosWrite(int)(imin2(x,y));
}
// set_seed(x,y)
EXTERNML value r_set_seed(value v) {
  int x = MosRead(int)(Field(v, 0));
  int y = MosRead(int)(Field(v, 1));
  set_seed(x,y);
  return Val_unit;
}
// get_seed(x,y)
EXTERNML value r_get_seed(value dummy) {
  value tup = alloc_tuple(2);	/* Allocate 2-element tuple in ML heap */
  /* Must, in general, use modify to update because the GC is generational: */
  int x, y;
  get_seed(&x, &y);
  modify(&Field(tup, 0), MosWrite(int)(x));
  modify(&Field(tup, 1), MosWrite(int)(y));
  return tup;
}
// lgammafn_sign(x)
EXTERNML value r_lgammafn_sign(value v) {
  value tup = alloc_tuple(2);	/* Allocate 2-element tuple in ML heap */
  /* Must, in general, use modify to update because the GC is generational: */
  double x = MosRead(double)(v);
  int i;
  double y = lgammafn_sign(x, &i);
  modify(&Field(tup, 0), MosWrite(double)(y));
  modify(&Field(tup, 1), MosWrite(int)(i));
  return tup;
}
