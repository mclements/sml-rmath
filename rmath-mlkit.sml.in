divert(`-1')dnl
define(`MLKIT_TYPE',`ifelse($1,double,real,int)')
define(`CONSTANT',`val $2 = $3')
define(`FUNCTION0',`fun $2() : real =
    prim("mlkit_$2", ())')
define(`FUNCTION1',`fun $2($4: MLKIT_TYPE($3)) : real =
    prim("mlkit_$2", ($4))')
define(`FUNCTION2',`fun $2($4: MLKIT_TYPE($3), $6: MLKIT_TYPE($5)) : real =
    prim("mlkit_$2", ($4, $6))')
define(`FUNCTION3',`fun $2($4: MLKIT_TYPE($3), $6: MLKIT_TYPE($5), $8: MLKIT_TYPE($7)) : real =
    prim("mlkit_$2", ($4, $6, $8))')
define(`FUNCTION4',`fun $2($4: MLKIT_TYPE($3), $6: MLKIT_TYPE($5), $8: MLKIT_TYPE($7),
			   $10: MLKIT_TYPE($9)) : real =
    prim("mlkit_$2", ($4, $6, $8, $10))')
define(`FUNCTION5',`fun $2($4: MLKIT_TYPE($3), $6: MLKIT_TYPE($5), $8: MLKIT_TYPE($7),
			   $10: MLKIT_TYPE($9), $12: MLKIT_TYPE($10)) : real =
    prim("mlkit_$2", ($4, $6, $8, $10, $12))')
define(`FUNCTION6',`fun $2($4: MLKIT_TYPE($3), $6: MLKIT_TYPE($5), $8: MLKIT_TYPE($7),
			   $10: MLKIT_TYPE($9), $12: MLKIT_TYPE($10), $14: MLKIT_TYPE($13)) : real =
    prim("mlkit_$2", ($4, $6, $8, $10, $12, $14))')
divert(`1')dnl
structure Rmath :> RMATH = struct
datatype test_alternative = TwoSided | Less | Greater
include(`rmath-template.m4')dnl
fun imax2(a: int, b: int) : int =
    prim("mlkit_imax2", (a, b))
fun imin2(a: int, b: int) : int =
    prim("mlkit_imin2", (a, b))
fun set_seed(a: int, b: int) : unit =
    prim("mlkit_set_seed", (a, b))
fun get_seed() : int * int =
    prim("mlkit_get_seed", ())
fun rmultinom(n, prob) =
    let
	val k = Array.length prob
	val p_tot = Array.foldr (op +) 0.0 prob
	val rN = Array.array(k,0)
	fun loop(i, p_tot, n) =
	    if i=k-1 orelse n=0 then
		let
		    val _ = Array.update(rN,k-1,n)
		in
		    rN
		end
	    else
		if Array.sub(prob,i)>0.0 then
		    let
			val pp = Array.sub(prob,i)/p_tot
			val rNi = if pp < 1.0 then Real.trunc(rbinom(Real.fromInt n, pp)) else n
			val _ = Array.update(rN,i,rNi)
		    in
			loop(i+1, p_tot-Array.sub(prob,i), n-rNi)
		    end
		else
		    loop(i+1,p_tot,n)
    in
	loop(0,p_tot,n)
    end
(* fun lgammafn_sign(x: real) : real * int = *)
(*     prim("mlkit_lgammafn_sign", (x)) *)
fun lgammafn_sign x = (lgammafn x, if x>0.0 then 1 else ~1)
EXTRAFUNS(Real.posInf)
