divert(`-1')dnl
define(`CONSTANT',`(* $1 *)
val $2 = $3')

define(`FUNCTION0',`(* $1 *)
val $2 : unit -> real = app1 (dlsym dlh "r_$2")')

define(`FUNCTION1',`(* $1 *)
val $2 : TYPE($3) -> real = app1 (dlsym dlh "r_$2")')

define(`FUNCTION2',`(* $1 *)
val $2 : TYPE($3) * TYPE($5) -> real = app1 (dlsym dlh "r_$2")')

define(`FUNCTION3',`(* $1 *)
val $2 : TYPE($3) * TYPE($5) * TYPE($7) -> real = app1 (dlsym dlh "r_$2")')

define(`FUNCTION4',`(* $1 *)
val $2 : TYPE($3) * TYPE($5) * TYPE($7) * TYPE($9) -> real = app1 (dlsym dlh "r_$2")')

define(`FUNCTION5',`(* $1 *)
val $2 : TYPE($3) * TYPE($5) * TYPE($7) * TYPE($9) * TYPE($11) -> real = app1 (dlsym dlh "r_$2")')

define(`FUNCTION6',`(* $1 *)
val $2 : TYPE($3) * TYPE($5) * TYPE($7) * TYPE($9) * TYPE($11) * TYPE($13) -> real = app1 (dlsym dlh "r_$2")')
divert(`1')dnl
structure Rmath :> RMATH =
struct
datatype test_alternative = TwoSided | Less | Greater
open Dynlib;
(* Obtain a handle pointing to the library defining the C functions: *)
val dlh = dlopen { lib = Path.concat(FileSys.getDir (), "DLLNAME"),
		 flag = RTLD_LAZY, 
		 global = false }
include(`rmath-template.m4')dnl
val imin2 : int * int -> int = app1 (dlsym dlh "r_imin2")
val imax2 : int * int -> int = app1 (dlsym dlh "r_imax2")
val set_seed : int * int -> unit = app1 (dlsym dlh "r_set_seed")
val get_seed : unit -> int * int = app1 (dlsym dlh "r_get_seed")
val lgammafn_sign : real -> real * int = app1 (dlsym dlh "r_lgammafn_sign")
fun rmultinom(n, prob) =
    let
	val k = Array.length prob
	val p_tot = Array.foldr (op +) 0.0 prob
	val rN = Array.array(k,0)
	fun loop(i, p_tot, n) =
	    if i=k-1 orelse n=0 then
		let
		    val _ = Array.update(rN,k-1,n)
		in
		    rN
		end
	    else
		if Array.sub(prob,i)>0.0 then
		    let
			val pp = Array.sub(prob,i)/p_tot
			val rNi = if pp < 1.0 then Real.trunc(rbinom(Real.fromInt n, pp)) else n
			val _ = Array.update(rN,i,rNi)
		    in
			loop(i+1, p_tot-Array.sub(prob,i), n-rNi)
		    end
		else
		    loop(i+1,p_tot,n)
    in
	loop(0,p_tot,n)
    end
EXTRAFUNS(8.98846567431157903968e307)
