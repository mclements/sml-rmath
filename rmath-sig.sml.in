(* This Source Code Form is subject to the terms of the Mozilla Public *)
(* License, v. 2.0.  If a copy of the MPL was not distributed with this *)
(* file, You can obtain one at http://mozilla.org/MPL/2.0/. *)

(* Copyright 2018 Mark Clements *)

divert(`-1')
define(`CONSTANT',`(* $1 *)
val $2 : real')
define(`FUNCTION0',`(* $1. $2() *)
val $2 : unit -> real')
define(`FUNCTION1',`(* $1. $2($4) *)
val $2 : TYPE($3) -> real')
define(`FUNCTION2',`(* $1. $2($4,$6): TYPE($3) * TYPE($5) -> real *)
val $2 : TYPE($3) * TYPE($5) -> real')
define(`FUNCTION3',`(* $1. $2($4,$6,$8) *)
val $2 : TYPE($3) * TYPE($5) * TYPE($7) -> real')
define(`FUNCTION4',`(* $1. $2($4,$6,$8,$10) *)
val $2 : TYPE($3) * TYPE($5) * TYPE($7) * TYPE($9) -> real')
define(`FUNCTION5',`(* $1. $2($4,$6,$8,$10,$12) *)
val $2 : TYPE($3) * TYPE($5) * TYPE($7) * TYPE($9) * TYPE($11) -> real')
define(`FUNCTION6',`(* $1. $2($4,$6,$8,$10,$12,$14) *)
val $2 : TYPE($3) * TYPE($5) * TYPE($7) * TYPE($9) * TYPE($11) * TYPE($13) -> real')
divert(`1')dnl
signature RMATH =
sig
datatype test_alternative = TwoSided | Less | Greater
include(`rmath-template.m4')dnl
(* imax2. imax2(a,b) *)
val imax2 : int * int -> int
(* imin2. imin2(a,b) *)
val imin2 : int * int -> int
(* log(1 + exp(x)). log1pexp(x) *)
val log1pexp : real -> real
(* Normal cumulative density function. pnorm5(q,mean,sd,lower,log) *)
val pnorm : real * real * real * int * int -> real
(* Normal quantile function. qnorm(p,mean,sd,lower,log) *)
val qnorm : real * real * real * int * int -> real
(* Normal probability density function. dnorm(p,mean,sd,log) *)
val dnorm : real * real * real * int -> real
(* Get random seed. get_seed(a,b) *)
val get_seed : unit -> int * int
(* Set random seed. set_seed(a,b) *)
val set_seed : int * int -> unit
(* Sample from a multinomial distribution. rmultinom(n,prob) *)
val rmultinom : int * real Array.array -> int Array.array
(* log(gamma) with sign. lgammafn_sign(x) *)
val lgammafn_sign : real -> real * int
(* some additional functions *)
(* Poisson confidence interval. poisson_ci(x, t, alternative, confLevel) *)
val poisson_ci : real * real * test_alternative -> real * real
(* Poisson test. poisson_test(x, t, r, alternative) *)
val poisson_test : real * real * real * test_alternative -> real
end
