(* This Source Code Form is subject to the terms of the Mozilla Public *)
(* License, v. 2.0.  If a copy of the MPL was not distributed with this *)
(* file, You can obtain one at http://mozilla.org/MPL/2.0/. *)
											      
(* Copyright 2018 Mark Clements *)

divert(`-1')
define(`FTYPE',`dnl
ifelse($1,unsigned int,cUint,
$1,int,cInt,
$1,unsigned short,cUshort,
$1,short,cShort,
$1,unsigned long,cUlong,
$1,long,cLong,
$1,double,cDouble,
$1,float,cFloat,
$1,void *,cPointer,
$1)')
define(`CONSTANT',`val $2 = $3')
define(`FUNCTION0',`val $2 = buildCall0((getSymbol lib "$2"), (), cDouble)')
define(`FUNCTION1',`val $2 = buildCall1((getSymbol lib "$2"), (FTYPE($3)), cDouble)')
define(`FUNCTION2',`val $2 = buildCall2((getSymbol lib "$2"), (FTYPE($3),FTYPE($5)), cDouble)')
define(`FUNCTION3',`val $2 = buildCall3((getSymbol lib "$2"), (FTYPE($3),FTYPE($5),FTYPE($7)), cDouble)')
define(`FUNCTION4',`val $2 = buildCall4((getSymbol lib "$2"), (FTYPE($3),FTYPE($5),FTYPE($7),FTYPE($9)), cDouble)')
define(`FUNCTION5',`val $2 = buildCall5((getSymbol lib "$2"), (FTYPE($3),FTYPE($5),FTYPE($7),FTYPE($9),FTYPE($11)), cDouble)')
define(`FUNCTION6',`val $2 = buildCall6((getSymbol lib "$2"), (FTYPE($3),FTYPE($5),FTYPE($7),FTYPE($9),FTYPE($11),FTYPE($13)), cDouble)')
divert(`1')dnl
structure Rmath :> RMATH =
struct
open Foreign;
datatype test_alternative = TwoSided | Less | Greater
val lib = loadLibrary "LIBRMATH";
include(`rmath-template.m4')dnl
val imax2 = buildCall2((getSymbol lib "imax2"), (cInt, cInt), cInt)
val imin2 = buildCall2((getSymbol lib "imin2"), (cInt, cInt), cInt)
val set_seed = buildCall2((getSymbol lib "set_seed"), (cInt, cInt), cVoid)
local
    val get_seed_call = buildCall2((getSymbol lib "get_seed"), (cStar cInt, cStar cInt), cVoid)
    val rmultinom_call = buildCall4((getSymbol lib "rmultinom"), (cInt, cVectorPointer cDouble, cInt, cArrayPointer cInt), cVoid)
    val lgammafn_sign_call = buildCall2((getSymbol lib "lgammafn_sign"), (cDouble, cStar cInt), cDouble)
in
fun get_seed() =
    let
	val seed1 = ref 1
	and seed2 = ref 1
	val _ = get_seed_call(seed1, seed2)
    in
	(!seed1, !seed2)
    end
fun rmultinom(n : int, prob : real Array.array) =
    let
	val k = Array.length prob
	val vprob = Vector.tabulate(k, fn i => Array.sub(prob,i))
	val rN = Array.array(k, 0)
	val _ = rmultinom_call(n, vprob, k, rN)
    in
	rN
    end
fun lgammafn_sign(x) =
    let
	val sign = ref 0
	val y = lgammafn_sign_call(x, sign)
    in
	(y, !sign)
    end
end
EXTRAFUNS(Real.posInf)
